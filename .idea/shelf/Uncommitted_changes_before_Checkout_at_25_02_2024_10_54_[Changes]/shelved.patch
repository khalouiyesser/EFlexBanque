Index: src/Controller/RegistrationController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\User;\r\nuse App\\Form\\RegistrationFormType;\r\nuse App\\Security\\EmailVerifier;\r\nuse Doctrine\\ORM\\EntityManagerInterface;\r\nuse Symfony\\Bridge\\Twig\\Mime\\TemplatedEmail;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Mailer\\MailerInterface;\r\nuse Symfony\\Component\\Mime\\Address;\r\nuse Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\r\nuse SymfonyCasts\\Bundle\\VerifyEmail\\Exception\\VerifyEmailExceptionInterface;\r\n\r\nclass RegistrationController extends AbstractController\r\n{\r\n    private EmailVerifier $emailVerifier;\r\n\r\n    public function __construct(EmailVerifier $emailVerifier)\r\n    {\r\n        $this->emailVerifier = $emailVerifier;\r\n    }\r\n\r\n    #[Route('/register', name: 'app_register')]\r\n    public function register(Request $request, UserPasswordHasherInterface $userPasswordHasher, EntityManagerInterface $entityManager,MailerInterface $emailVerifier): Response\r\n    {\r\n        $user = new User();\r\n        $user->setRoles(['ROLE_CLIENT']);\r\n        $form = $this->createForm(RegistrationFormType::class, $user);\r\n        $form->handleRequest($request);\r\n\r\n        if ($form->isSubmitted() && $form->isValid()) {\r\n            // encode the plain password\r\n            $user->setPassword(\r\n                $userPasswordHasher->hashPassword(\r\n                    $user,\r\n                    $form->get('plainPassword')->getData()\r\n                )\r\n            );\r\n\r\n            $entityManager->persist($user);\r\n            $entityManager->flush();\r\n\r\n            // generate a signed url and email it to the user\r\n           /* $this->$emailVerifier->sendEmailConfirmation('app_verify_email', $user,\r\n                (new TemplatedEmail())\r\n                    ->from(new Address('yesser.khaloui@etudiant-fst.utm.tn'))\r\n                    ->to($user->getEmail())\r\n                    ->subject('Please Confirm your Email')\r\n                    ->htmlTemplate('registration/confirmation_email.html.twig')\r\n            );*/\r\n            // do anything else you need here, like send an email\r\n\r\n            return $this->redirectToRoute('app_actualite');\r\n        }\r\n\r\n        return $this->render('registration/register.html.twig', [\r\n            'registrationForm' => $form->createView(),\r\n       \r\n        ]);\r\n    }\r\n\r\n    #[Route('/verify/email', name: 'app_verify_email')]\r\n    public function verifyUserEmail(Request $request, TranslatorInterface $translator): Response\r\n    {\r\n        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');\r\n\r\n        // validate email confirmation link, sets User::isVerified=true and persists\r\n        try {\r\n            $this->emailVerifier->handleEmailConfirmation($request, $this->getUser());\r\n        } catch (VerifyEmailExceptionInterface $exception) {\r\n            $this->addFlash('verify_email_error', $translator->trans($exception->getReason(), [], 'VerifyEmailBundle'));\r\n\r\n            return $this->redirectToRoute('app_register');\r\n        }\r\n\r\n        // @TODO Change the redirect on success and handle or remove the flash message in your templates\r\n        $this->addFlash('success', 'Your email address has been verified.');\r\n\r\n        return $this->redirectToRoute('app_register');\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/Controller/RegistrationController.php b/src/Controller/RegistrationController.php
--- a/src/Controller/RegistrationController.php	
+++ b/src/Controller/RegistrationController.php	
@@ -56,7 +56,7 @@
             );*/
             // do anything else you need here, like send an email
 
-            return $this->redirectToRoute('app_actualite');
+            return $this->redirectToRoute('app_main');
         }
 
         return $this->render('registration/register.html.twig', [
